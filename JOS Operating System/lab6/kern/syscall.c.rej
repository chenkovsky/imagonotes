--- kern/syscall.c	(版本 1345)
+++ kern/syscall.c	(版本 1541)
@@ -4,27 +4,27 @@
 #include <inc/error.h>
 #include <inc/string.h>
 #include <inc/assert.h>
-
+#include <kern/monitor.h>
 #include <kern/env.h>
 #include <kern/pmap.h>
 #include <kern/trap.h>
 #include <kern/syscall.h>
 #include <kern/console.h>
 #include <kern/sched.h>
-
+#include <kern/ide.h>
 // Print a string to the system console.
 // The string is exactly 'len' characters long.
 // Destroys the environment on memory errors.
 static void
 sys_cputs(const char *s, size_t len)
 {
-	// Check that the user has permission to read memory [s, s+len).
-	// Destroy the environment if not.
-	
-	// LAB 3: Your code here.
+    // Check that the user has permission to read memory [s, s+len).
+    // Destroy the environment if not.
 
-	// Print the string supplied by the user.
-	cprintf("%.*s", len, s);
+    // LAB 3: Your code here.
+    user_mem_assert(curenv,s,len,PTE_P);
+    // Print the string supplied by the user.
+    cprintf("%.*s", len, s);
 }
 
 // Read a character from the system console.
@@ -427,20 +581,159 @@
 static int
 sys_ipc_recv(void *dstva)
 {
-	// LAB 4: Your code here.
-	panic("sys_ipc_recv not implemented");
-	return 0;
+    // LAB 4: Your code here.
+    int r;
+    if((uint32_t)dstva < UTOP) {
+        /*recv page*/
+        if((uint32_t)dstva % PGSIZE) {
+            return -E_INVAL;
+        }else{
+            //cprintf("want get map page\n");
+            curenv->env_ipc_dstva = dstva;
+        }
+    }else{
+        /*if not recieve page set the dstva as UTOP*/
+        curenv->env_ipc_dstva = (void *) UTOP;
+    }
+    curenv->env_ipc_recving = 1;
+    curenv->env_status = ENV_NOT_RUNNABLE;
+    curenv->env_ipc_perm = 0;
+    curenv->env_ipc_value = 0;
+    curenv->env_ipc_from = 0;
+    //cprintf("curenv:%d recv set ok\n",curenv->env_id);
+    curenv->env_tf.tf_regs.reg_eax = 0;
+    sched_yield();
+    return 0;//never return
+    //panic("sys_ipc_recv not implemented");
+    //return 0;
 }
 
 
+int
+sys_ide_read(uint32_t secno, void *dst, size_t nsecs)
+{   envs[1].env_tf.tf_padding2 = 1;
+	return ide_dma_read(secno,dst,nsecs);
+}
+
+int
+sys_ide_write(uint32_t secno, void *src, size_t nsecs)
+{   envs[1].env_tf.tf_padding2 = 1;
+	return ide_dma_write(secno,src,nsecs);
+}
+
 // Dispatches to the correct kernel function, passing the arguments.
 int32_t
 syscall(uint32_t syscallno, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4, uint32_t a5)
 {
-	// Call the function corresponding to the 'syscallno' parameter.
-	// Return any appropriate return value.
-	// LAB 3: Your code here.
+    // Call the function corresponding to the 'syscallno' parameter.
+    // Return any appropriate return value.
+    // LAB 3: Your code here.
+    //cprintf("kern syscall\n");
+    int r = 0;
+    switch (syscallno) {
+    case SYS_cputs:
+        //cprintf("cputs\n");
+        sys_cputs((char*)a1,(size_t)a2);
+        break;
+    case SYS_cgetc:
+        //cprintf("sys_cgetc\n");
+        r = (int32_t)sys_cgetc();
+        break;
+    case SYS_getenvid:
+        //cprintf("sys_getenvid\n");
+        r = (int32_t)sys_getenvid();
+        break;
+    case SYS_env_destroy:
+        //cprintf("sys_env_destroy\n");
+        r = (int32_t)sys_env_destroy((envid_t)a1);
+        break;
+    /*case SYS_dump_env:
+        //cprintf("sys_dump_env\n");
+        r = sys_dump_env();
+        break;*/
+    case SYS_page_alloc:
+        r = sys_page_alloc((envid_t)a1,(void*)a2,(int)a3);
+        break;
+    case SYS_page_map:
+        r = sys_page_map((envid_t)a1,(void*)a2,(envid_t)a3,(void*)a4,(int)a5);
+        break;
+    case SYS_page_unmap:
+        r = sys_page_unmap((envid_t)a1,(void*)a2);
+        break;
+    case SYS_exofork:
+        r = sys_exofork();
+        break;
+    case SYS_env_set_status:
+        r = sys_env_set_status((envid_t)a1,(int)a2);
+        break;
+    case SYS_env_set_trapframe:
+        r = sys_env_set_trapframe((envid_t)a1,(struct Trapframe *)a2);
+        break;
+    case SYS_env_set_pgfault_upcall:
+        r = sys_env_set_pgfault_upcall((envid_t)a1,(void*)a2);
+        break;
+    case SYS_yield:
+        sys_yield();
+        break;
+    case SYS_ipc_try_send:
+        r = sys_ipc_try_send((envid_t)a1,(uint32_t)a2,(void*)a3,(unsigned) a4);
+        break;
+    case SYS_ipc_recv:
+        r = sys_ipc_recv((void*)a1);
+        break;
+    case SYS_ide_read:
+        r = sys_ide_read((uint32_t)a1,(void*)a2,(size_t)a3);
+        break;
+    case SYS_ide_write:
+        r = sys_ide_write((uint32_t)a1,(void*)a2,(size_t)a3);
+        break;
+    default:
+        return -E_INVAL;
+    }
+    //curenv->env_syscalls++;
+    return r;
+    //panic("syscall not implemented");
+}
 
-	panic("syscall not implemented");
+void syscallwrap(struct SysFrame *sf){
+    //save some register
+    curenv->env_tf.tf_regs = sf->tf_regs;
+    curenv->env_tf.tf_ds = sf->sf_ds;
+    curenv->env_tf.tf_es = sf->sf_es;
+    curenv->env_tf.tf_esp = sf->sf_esp;//the return esp of the user stack
+    curenv->env_tf.tf_eip = sf->sf_eip;//the return address in the lib/syscall which on user stack
+    curenv->env_tf.tf_regs.reg_esi = sf->sf_eip;//the restore the return address to the esi
+    curenv->env_tf.tf_eflags = sf->sf_eflags;
+    //cprintf("is the eflags of %d :%d interruptable in syscallwrap? %d\n",curenv->env_id,sf->sf_eflags,(sf->sf_eflags&FL_IF));
+    //curenv->env_tf.tf_regs.reg_ecx = sf->sf_esp;
+    //curenv->env_tf.tf_regs.reg_edx = sf->sf_eip;
+    /*cprintf("the tf's esp is--%x\n",sf->sf_esp);
+    cprintf("the tf's eip is--%x\n",sf->sf_eip);
+    cprintf("reg_eax = %x\n",sf->tf_regs.reg_eax);
+    //curenv->env_tf.tf_esp = tf->tf_regs.reg_ebp;
+    //curenv->env_tf.tf_eip = tf->tf_regs.reg_esi; */  
+    /*if(sf->tf_regs.reg_eax == SYS_page_map){
+    cprintf("reg_edx = %x\n",sf->tf_regs.reg_edx);
+    cprintf("reg_ecx = %x\n",sf->tf_regs.reg_ecx); 
+    cprintf("reg_ebx = %x\n",sf->tf_regs.reg_ebx);
+    cprintf("reg_edi = %x\n",sf->tf_regs.reg_edi);
+    cprintf("reg_esi = %x\n",sf->tf_regs.reg_esi); 
+    }*/
+    //cprintf("eflags store %x\n",curenv->env_tf.tf_eflags);
+    curenv->env_tf.tf_padding1 = 1;//use to check whether this use sysenter
+    sf->tf_regs.reg_eax = syscall(sf->tf_regs.reg_eax,
+                                  sf->tf_regs.reg_edx,
+                                  sf->tf_regs.reg_ecx,
+                                  sf->tf_regs.reg_ebx,
+                                  sf->tf_regs.reg_edi,
+                                  sf->tf_regs.reg_esi);
+    curenv->env_tf.tf_padding1 = 0;
+    //curenv->env_tf.tf_regs.reg_eax = sf->tf_regs.reg_eax;
+    sf->tf_regs.reg_esi = sf->sf_eip;
+    sf->sf_eflags &= ~FL_IF;
+    //cprintf("got here in syscallwrap\n");
+    return;
 }
 
+
+
