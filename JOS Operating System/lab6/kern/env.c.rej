--- kern/env.c	(版本 1345)
+++ kern/env.c	(版本 1541)
@@ -16,9 +16,15 @@
 struct Env *envs = NULL;		// All environments
 struct Env *curenv = NULL;	        // The current env
 static struct Env_list env_free_list;	// Free list
+static int allocated_envs=0;
 
 #define ENVGENSHIFT	12		// >= LOGNENV
 
+int get_allocated_envs_n()
+{
+    return allocated_envs;
+}
+
 //
 // Converts an envid to an env pointer.
 //
@@ -30,37 +36,37 @@
 int
 envid2env(envid_t envid, struct Env **env_store, bool checkperm)
 {
-	struct Env *e;
+    struct Env *e;
 
-	// If envid is zero, return the current environment.
-	if (envid == 0) {
-		*env_store = curenv;
-		return 0;
-	}
+    // If envid is zero, return the current environment.
+    if (envid == 0) {
+        *env_store = curenv;
+        return 0;
+    }
 
-	// Look up the Env structure via the index part of the envid,
-	// then check the env_id field in that struct Env
-	// to ensure that the envid is not stale
-	// (i.e., does not refer to a _previous_ environment
-	// that used the same slot in the envs[] array).
-	e = &envs[ENVX(envid)];
-	if (e->env_status == ENV_FREE || e->env_id != envid) {
-		*env_store = 0;
-		return -E_BAD_ENV;
-	}
+    // Look up the Env structure via the index part of the envid,
+    // then check the env_id field in that struct Env
+    // to ensure that the envid is not stale
+    // (i.e., does not refer to a _previous_ environment
+    // that used the same slot in the envs[] array).
+    e = &envs[ENVX(envid)];
+    if (e->env_status == ENV_FREE || e->env_id != envid) {
+        *env_store = 0;
+        return -E_BAD_ENV;
+    }
 
-	// Check that the calling environment has legitimate permission
-	// to manipulate the specified environment.
-	// If checkperm is set, the specified environment
-	// must be either the current environment
-	// or an immediate child of the current environment.
-	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
-		*env_store = 0;
-		return -E_BAD_ENV;
-	}
+    // Check that the calling environment has legitimate permission
+    // to manipulate the specified environment.
+    // If checkperm is set, the specified environment
+    // must be either the current environment
+    // or an immediate child of the current environment.
+    if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
+        *env_store = 0;
+        return -E_BAD_ENV;
+    }
 
-	*env_store = e;
-	return 0;
+    *env_store = e;
+    return 0;
 }
 
 //
@@ -72,7 +78,17 @@
 void
 env_init(void)
 {
-	// LAB 3: Your code here.
+    // LAB 3: Your code here.
+    int i;
+    struct Env *e;
+    LIST_INIT(&env_free_list);
+    for (i = NENV-1; i>=0;i--) {/*insert in reverse order*/
+        e = &envs[i];
+        e->env_id = 0;
+        e->env_status = ENV_FREE;
+        LIST_INSERT_HEAD(&env_free_list, e, env_link);
+    }
+    //finished
 }
 
 //
@@ -88,36 +104,43 @@
 static int
 env_setup_vm(struct Env *e)
 {
-	int i, r;
-	struct Page *p = NULL;
+    int i, r;
+    struct Page *p = NULL;
 
-	// Allocate a page for the page directory
-	if ((r = page_alloc(&p)) < 0)
-		return r;
+    // Allocate a page for the page directory
+    if ((r = page_alloc(&p)) < 0)
+        return r;
 
-	// Now, set e->env_pgdir and e->env_cr3,
-	// and initialize the page directory.
-	//
-	// Hint:
-	//    - The VA space of all envs is identical above UTOP
-	//      (except at VPT and UVPT, which we've set below).
-	//	See inc/memlayout.h for permissions and layout.
-	//	Can you use boot_pgdir as a template?  Hint: Yes.
-	//	(Make sure you got the permissions right in Lab 2.)
-	//    - The initial VA below UTOP is empty.
-	//    - You do not need to make any more calls to page_alloc.
-	//    - Note: pp_ref is not maintained for most physical pages
-	//	mapped above UTOP -- but you do need to increment
-	//	env_pgdir's pp_ref!
+    // Now, set e->env_pgdir and e->env_cr3,
+    // and initialize the page directory.
+    //
+    // Hint:
+    //    - The VA space of all envs is identical above UTOP
+    //      (except at VPT and UVPT, which we've set below).
+    //	See inc/memlayout.h for permissions and layout.
+    //	Can you use boot_pgdir as a template?  Hint: Yes.
+    //	(Make sure you got the permissions right in Lab 2.)
+    //    - The initial VA below UTOP is empty.
+    //    - You do not need to make any more calls to page_alloc.
+    //    - Note: pp_ref is not maintained for most physical pages
+    //	mapped above UTOP -- but you do need to increment
+    //	env_pgdir's pp_ref!
 
-	// LAB 3: Your code here.
+// LAB 3: Your code here.
+    p->pp_ref ++;
+    memset(page2kva(p),0,PGSIZE);
+    e->env_pgdir = page2kva(p);
+    e->env_cr3 = page2pa(p);
+    /*get the page map upon the UTOP*/
+    for (i = UTOP; i != 0; i += PTSIZE) {
+        e->env_pgdir[PDX(i)] = boot_pgdir[PDX(i)];
+    }
 
-	// VPT and UVPT map the env's own page table, with
-	// different permissions.
-	e->env_pgdir[PDX(VPT)]  = e->env_cr3 | PTE_P | PTE_W;
-	e->env_pgdir[PDX(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
-
-	return 0;
+    // VPT and UVPT map the env's own page table, with
+    // different permissions.
+    e->env_pgdir[PDX(VPT)]  = e->env_cr3 | PTE_P | PTE_W;
+    e->env_pgdir[PDX(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
+    return 0;
 }
 
 //
@@ -152,7 +175,9 @@
 	e->env_parent_id = parent_id;
 	e->env_status = ENV_RUNNABLE;
 	e->env_runs = 0;
-
+        e->env_ipc_dstva = (void*)UTOP;
+        e->env_ipc_perm = 0;
+        e->env_ipc_from = 0;
 	// Clear out all the saved register state,
 	// to prevent the register values
 	// of a prior environment inhabiting this Env structure
@@ -173,7 +198,7 @@
 
 	// Enable interrupts while in user mode.
 	// LAB 4: Your code here.
-
+    e->env_tf.tf_eflags |= FL_IF;
 	// Clear the page fault handler until user installs one.
 	e->env_pgfault_upcall = 0;
 
@@ -182,10 +207,13 @@
 
 	// If this is the file server (e == &envs[1]) give it I/O privileges.
 	// LAB 5: Your code here.
-
+    if(e == &envs[1]) {
+        e->env_tf.tf_eflags |= FL_IOPL_MASK;//?General Protection fault
+    }
 	// commit the allocation
 	LIST_REMOVE(e, env_link);
 	*newenv_store = e;
+    allocated_envs++;
 
 	// cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
 	return 0;
@@ -201,14 +229,27 @@
 static void
 segment_alloc(struct Env *e, void *va, size_t len)
 {
-	// LAB 3: Your code here.
-	// (But only if you need it for load_icode.)
-	//
-	// Hint: It is easier to use segment_alloc if the caller can pass
-	//   'va' and 'len' values that are not page-aligned.
-	//   You should round va down, and round len up.
+    // LAB 3: Your code here.
+    // (But only if you need it for load_icode.)
+    //
+    // Hint: It is easier to use segment_alloc if the caller can pass
+    //   'va' and 'len' values that are not page-aligned.
+    //   You should round va down, and round len up.
+    int i;
+    struct Page* page;
+    if (e) {
+        va = ROUNDDOWN(va,PGSIZE);
+        len = ROUNDUP(len,PGSIZE);
+        /*alloc and map the page*/
+        for (i = 0; i<len;i+=PGSIZE) {
+            if (page_alloc(&page)) {
+                panic("env_alloc: %e\n", -E_NO_MEM);
+            }
+            page_insert(e->env_pgdir,page,va,PTE_U|PTE_W|PTE_P);
+            va += PGSIZE;
+        }
+    }
 }
-
 //
 // Set up the initial program binary, stack, and processor flags
 // for a user process.
@@ -234,40 +275,72 @@
 static void
 load_icode(struct Env *e, uint8_t *binary, size_t size)
 {
-	// Hints: 
-	//  Load each program segment into virtual memory
-	//  at the address specified in the ELF section header.
-	//  You should only load segments with ph->p_type == ELF_PROG_LOAD.
-	//  Each segment's virtual address can be found in ph->p_va
-	//  and its size in memory can be found in ph->p_memsz.
-	//  The ph->p_filesz bytes from the ELF binary, starting at
-	//  'binary + ph->p_offset', should be copied to virtual address
-	//  ph->p_va.  Any remaining memory bytes should be cleared to zero.
-	//  (The ELF header should have ph->p_filesz <= ph->p_memsz.)
-	//
-	//  All page protection bits should be user read/write for now.
-	//  ELF segments are not necessarily page-aligned, but you can
-	//  assume for this function that no two segments will touch
-	//  the same virtual page.
-	//
-	//  You may find a function like segment_alloc useful.
-	//
-	//  Loading the segments is much simpler if you can move data
-	//  directly into the virtual addresses stored in the ELF binary.
-	//  So which page directory should be in force during
-	//  this function?
-	//
-	// Hint:
-	//  You must also do something with the program's entry point,
-	//  to make sure that the environment starts executing there.
-	//  What?  (See env_run() and env_pop_tf() below.)
+    // Hints: 
+    //  Load each program segment into virtual memory
+    //  at the address specified in the ELF section header.
+    //  You should only load segments with ph->p_type == ELF_PROG_LOAD.//ok
+    //  Each segment's virtual address can be found in ph->p_va
+    //  and its size in memory can be found in ph->p_memsz.
+    //  The ph->p_filesz bytes from the ELF binary, starting at
+    //  'binary + ph->p_offset', should be copied to virtual address
+    //  ph->p_va.  Any remaining memory bytes should be cleared to zero.
+    //  (The ELF header should have ph->p_filesz <= ph->p_memsz.)
+    //
+    //  All page protection bits should be user read/write for now.
+    //  ELF segments are not necessarily page-aligned, but you can
+    //  assume for this function that no two segments will touch
+    //  the same virtual page.
+    //
+    //  You may find a function like segment_alloc useful.
+    //
+    //  Loading the segments is much simpler if you can move data
+    //  directly into the virtual addresses stored in the ELF binary.
+    //  So which page directory should be in force during
+    //  this function?
+    //
+    // Hint:
+    //  You must also do something with the program's entry point,
+    //  to make sure that the environment starts executing there.
+    //  What?  (See env_run() and env_pop_tf() below.)
 
-	// LAB 3: Your code here.
+    // LAB 3: Your code here.
+    struct Elf *env_elf = (struct Elf *)binary;
+    struct Proghdr *ph, *eph;
+    struct Page *page;
+    //cprintf("before ph\n");
+    ph = (struct Proghdr *) ((uint8_t *) env_elf + env_elf->e_phoff);
+    //cprintf("after ph\n");
+    eph = ph + env_elf->e_phnum;
+    lcr3(e->env_cr3);//load cr3    
+    for (; ph != eph; ph++) {
+        if (ph->p_type == ELF_PROG_LOAD) {
+            segment_alloc(e, (void*) ph->p_va, ph->p_memsz);//map virtual address
+            //cprintf("ph->p_va:%x\n",ph->p_va);
+            //cprintf("ph->p_offset:%x\n",ph->p_offset);
+            //cprintf("ph->p_memsz:%x\n",ph->p_memsz);
+            memcpy((void*) ph->p_va, (void*)(binary + ph->p_offset), ph->p_filesz);//copy
+            memset((void*)(ph->p_va + ph->p_filesz), 0, ph->p_memsz - ph->p_filesz);//clear the rest memory
+        }
+    }
+    lcr3(boot_cr3);//set the cr3 back
+    e->env_tf.tf_eip = env_elf->e_entry;//set the env'eip to the entry of the program
+    // Now map one page for the program's initial stack
+    // at virtual address USTACKTOP - PGSIZE.
 
-	// Now map one page for the program's initial stack
-	// at virtual address USTACKTOP - PGSIZE.
-
-	// LAB 3: Your code here.
+    // LAB 3: Your code here.
+    int err;
+    if (page_alloc(&page)) {
+        err = -E_NO_MEM;
+        panic("env_alloc: %e\n", err);
+    }
+    page_insert(e->env_pgdir,page,(void*)(USTACKTOP - PGSIZE),PTE_U|PTE_W|PTE_P);
+    /*cprintf("load_icode here\n");
+    cprintf("esp: %x\n",e->env_tf.tf_esp );
+    cprintf("es: %x\n",e->env_tf.tf_es );
+    cprintf("eip: %x\n",e->env_tf.tf_eip);
+    cprintf("cs: %x\n",e->env_tf.tf_cs );
+    cprintf("ds: %x\n",e->env_tf.tf_ds);
+    cprintf("ss: %x\n",e->env_tf.tf_ss);*/
 }
 
 //
@@ -283,7 +356,17 @@
 void
 env_create(uint8_t *binary, size_t size)
 {
-	// LAB 3: Your code here.
+    // LAB 3: Your code here.
+    //cprintf("binary%x\n",binary);
+    struct Env *env;
+    int err = env_alloc(&env, 0);
+    if (err != -E_NO_FREE_ENV && err != -E_NO_MEM) {
+        load_icode(env,binary,size);
+    } else {
+        panic("env create error\n");
+    }
+    //cprintf("env alloced %x\n",env);
+
 }
 
 //
@@ -303,7 +386,7 @@
 		lcr3(boot_cr3);
 
 	// Note the environment's demise.
-	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
+	 cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
 
 	// Flush all mapped pages in the user portion of the address space
 	static_assert(UTOP % PTSIZE == 0);
@@ -337,6 +420,7 @@
 	// return the environment to the free list
 	e->env_status = ENV_FREE;
 	LIST_INSERT_HEAD(&env_free_list, e, env_link);
+    allocated_envs--;
 }
 
 //
@@ -347,12 +431,12 @@
 void
 env_destroy(struct Env *e) 
 {
-	env_free(e);
+    env_free(e);
 
-	if (curenv == e) {
-		curenv = NULL;
-		sched_yield();
-	}
+    if (curenv == e) {
+        curenv = NULL;
+        sched_yield();
+    }
 }
 
 
@@ -364,16 +448,39 @@
 void
 env_pop_tf(struct Trapframe *tf)
 {
-	__asm __volatile("movl %0,%%esp\n"
-		"\tpopal\n"
-		"\tpopl %%es\n"
-		"\tpopl %%ds\n"
-		"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
-		"\tiret"
-		: : "g" (tf) : "memory");
-	panic("iret failed");  /* mostly to placate the compiler */
+    __asm __volatile("movl %0,%%esp\n"
+                     "\tpopal\n"
+                     "\tpopl %%es\n"
+                     "\tpopl %%ds\n"
+                     "\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
+                     "\tiret"
+                     : : "g" (tf) : "memory");
+    panic("iret failed");  /* mo[stly to placate the compiler */
 }
-
+void env_pop_tf_sysexit(struct Trapframe *tf){
+    /*__asm __volatile("movl %0,%%esp\n"
+                     "\tpopal\n"
+                     "\tpopl %%es\n"
+                     "\tpopl %%ds\n"
+                     "\taddl $0x8,%%esp\n" 
+                     "\tiret"
+                     : : "g" (tf) : "memory");*/
+    //cprintf("sysexit pop_tf to:eip--%x  ebp--%x\n",tf->tf_eip,tf->tf_esp);
+    tf->tf_regs.reg_ecx = tf->tf_esp;
+    tf->tf_regs.reg_edx = tf->tf_eip;
+                asm volatile(
+                "movl %0,%%esp\t\n"
+                "popal\t\n"
+                "popl %%es\t\n"
+                "popl %%ds\t\n"
+                //"addl $16, %%esp\n\t"
+                //"popf\n\t"
+                //"sti\n\t"
+                "sysexit"
+                ::"g"(tf):"cc","memory"
+                        );
+    panic("sysexit failed");
+}
 //
 // Context switch from curenv to env e.
 // Note: if this is the first call to env_run, curenv is NULL.
@@ -396,7 +503,31 @@
 	//	e->env_tf to sensible values.
 	
 	// LAB 3: Your code here.
-
+    int is_sysexit = 0;
+    //cprintf("in the env_run function\n");
+    //cprintf("Env's id = %x\n",e->env_id);
+    if (curenv != NULL) {
+        //cprintf("How does the env go here,is sysenter?%d\n",curenv->env_tf.tf_padding1);
+        if (curenv->env_tf.tf_padding1 == 1) {
+            //cprintf("deal the condition that the env goes here by sysenter\n");
+            curenv->env_tf.tf_padding1 = 0;
+            //cprintf("the old env has set the padding1 as 0\n");
+            is_sysexit = 1;
+        }
+    }
+    //cprintf("the env arrive here\n");
+    if (curenv != e) {//if curenv = e, then the runs times won't be changed.
+        curenv = e;
+        curenv->env_runs ++;
+    }
+    lcr3(curenv->env_cr3);
+    //cprintf("env_run has load the cr3. esp:%x\n",curenv->env_tf.tf_esp);
+    //step2
+    //cprintf("env_run envid:%d\n",curenv->env_id);
+    //if(is_sysexit) {
+        //env_pop_tf_sysexit(&(e->env_tf));
+    //}
+    env_pop_tf(&(e->env_tf));
         panic("env_run not yet implemented");
 }
 
