***************
*** 6,23 ****
  #include <inc/string.h>
  #include <inc/assert.h>
  #include <inc/elf.h>
- 
  #include <kern/env.h>
  #include <kern/pmap.h>
  #include <kern/trap.h>
  #include <kern/monitor.h>
  
- struct Env *envs = NULL;		// All environments
- struct Env *curenv = NULL;	        // The current env
- static struct Env_list env_free_list;	// Free list
  
  #define ENVGENSHIFT	12		// >= LOGNENV
- 
  //
  // Converts an envid to an env pointer.
  //
--- 6,22 ----
  #include <inc/string.h>
  #include <inc/assert.h>
  #include <inc/elf.h>
+ #include <inc/env.h>
  #include <kern/env.h>
  #include <kern/pmap.h>
  #include <kern/trap.h>
  #include <kern/monitor.h>
  
+ struct Env *envs = NULL;        // All environments
+ struct Env *curenv = NULL;          // The current env
+ static struct Env_list env_free_list;   // Free list
  
  #define ENVGENSHIFT	12		// >= LOGNENV
  //
  // Converts an envid to an env pointer.
  //
***************
*** 131,183 ****
  int
  env_alloc(struct Env **newenv_store, envid_t parent_id)
  {
- 	int32_t generation;
- 	int r;
- 	struct Env *e;
  
- 	if (!(e = LIST_FIRST(&env_free_list)))
- 		return -E_NO_FREE_ENV;
  
- 	// Allocate and set up the page directory for this environment.
- 	if ((r = env_setup_vm(e)) < 0)
- 		return r;
  
- 	// Generate an env_id for this environment.
- 	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
- 	if (generation <= 0)	// Don't create a negative env_id.
- 		generation = 1 << ENVGENSHIFT;
- 	e->env_id = generation | (e - envs);
- 	
- 	// Set the basic status variables.
- 	e->env_parent_id = parent_id;
- 	e->env_status = ENV_RUNNABLE;
- 	e->env_runs = 0;
      e->env_syscalls = 0;
  
- 	// Clear out all the saved register state,
- 	// to prevent the register values
- 	// of a prior environment inhabiting this Env structure
- 	// from "leaking" into our new environment.
- 	memset(&e->env_tf, 0, sizeof(e->env_tf));
  
- 	// Set up appropriate initial values for the segment registers.
- 	// GD_UD is the user data segment selector in the GDT, and 
- 	// GD_UT is the user text segment selector (see inc/memlayout.h).
- 	// The low 2 bits of each segment register contains the
- 	// Requestor Privilege Level (RPL); 3 means user mode.
- 	e->env_tf.tf_ds = GD_UD | 3;
- 	e->env_tf.tf_es = GD_UD | 3;
- 	e->env_tf.tf_ss = GD_UD | 3;
- 	e->env_tf.tf_esp = USTACKTOP;
- 	e->env_tf.tf_cs = GD_UT | 3;
- 	// You will set e->env_tf.tf_eip later.
  
- 	// commit the allocation
- 	LIST_REMOVE(e, env_link);
- 	*newenv_store = e;
  
- 	cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
- 	return 0;
  }
  
  //
--- 147,200 ----
  int
  env_alloc(struct Env **newenv_store, envid_t parent_id)
  {
+     int32_t generation;
+     int r;
+     struct Env *e;
  
+     if (!(e = LIST_FIRST(&env_free_list)))
+         return -E_NO_FREE_ENV;
  
+     // Allocate and set up the page directory for this environment.
+     if ((r = env_setup_vm(e)) < 0)
+         return r;
  
+     // Generate an env_id for this environment.
+     generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
+     if (generation <= 0)    // Don't create a negative env_id.
+         generation = 1 << ENVGENSHIFT;
+     e->env_id = generation | (e - envs);
+ 
+     // Set the basic status variables.
+     e->env_parent_id = parent_id;
+     e->env_status = ENV_RUNNABLE;
+     e->env_runs = 0;
      e->env_syscalls = 0;
  
+     // Clear out all the saved register state,
+     // to prevent the register values
+     // of a prior environment inhabiting this Env structure
+     // from "leaking" into our new environment.
+     memset(&e->env_tf, 0, sizeof(e->env_tf));
  
+     // Set up appropriate initial values for the segment registers.
+     // GD_UD is the user data segment selector in the GDT, and 
+     // GD_UT is the user text segment selector (see inc/memlayout.h).
+     // The low 2 bits of each segment register contains the
+     // Requestor Privilege Level (RPL); 3 means user mode.
+     e->env_tf.tf_ds = GD_UD | 3;
+     e->env_tf.tf_es = GD_UD | 3;
+     e->env_tf.tf_ss = GD_UD | 3;
+     e->env_tf.tf_esp = USTACKTOP;
+     e->env_tf.tf_cs = GD_UT | 3;
+     // You will set e->env_tf.tf_eip later.
  
+     // commit the allocation
+     LIST_REMOVE(e, env_link);
+     *newenv_store = e;
  
+     cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
+     //panic("chenkov here\n");
+     return 0;
  }
  
  //
***************
*** 336,346 ****
  void
  env_destroy(struct Env *e) 
  {
- 	env_free(e);
  
- 	cprintf("Destroyed the only environment - nothing more to do!\n");
- 	while (1)
- 		monitor(NULL);
  }
  
  
--- 408,418 ----
  void
  env_destroy(struct Env *e) 
  {
+     env_free(e);
  
+     cprintf("Destroyed the only environment - nothing more to do!\n");
+     while (1)
+         monitor(NULL);
  }
  
  
***************
*** 378,398 ****
  void
  env_run(struct Env *e)
  {
- 	// Step 1: If this is a context switch (a new environment is running),
- 	//	   then set 'curenv' to the new environment,
- 	//	   update its 'env_runs' counter, and
- 	//	   and use lcr3() to switch to its address space.
- 	// Step 2: Use env_pop_tf() to restore the environment's
- 	//         registers and drop into user mode in the
- 	//         environment.
  
- 	// Hint: This function loads the new environment's state from
- 	//	e->env_tf.  Go back through the code you wrote above
- 	//	and make sure you have set the relevant parts of
- 	//	e->env_tf to sensible values.
- 	
- 	// LAB 3: Your code here.
  
-         panic("env_run not yet implemented");
  }
  
--- 450,492 ----
  void
  env_run(struct Env *e)
  {
+     // Step 1: If this is a context switch (a new environment is running),
+     //	   then set 'curenv' to the new environment,
+     //	   update its 'env_runs' counter, and
+     //	   and use lcr3() to switch to its address space.
+     // Step 2: Use env_pop_tf() to restore the environment's
+     //         registers and drop into user mode in the
+     //         environment.
  
+     // Hint: This function loads the new environment's state from
+     //	e->env_tf.  Go back through the code you wrote above
+     //	and make sure you have set the relevant parts of
+     //	e->env_tf to sensible values.
  
+     // LAB 3: Your code here.
+     //step1
+     //struct Env *former = curenv;
+ 
+     //cprintf("run enviroment address: %x\n",e);
+     //cprintf("current enviroment address: %x\n",curenv);
+     if(curenv != e) {//if curenv = e, then the runs times won't be changed.    
+         curenv = e;
+         curenv->env_runs ++;
+     }
+ 
+     //cprintf("current enviroment cr3: %x\n",curenv->env_cr3);
+     lcr3(curenv->env_cr3);
+     //cprintf("env_run here env_tf: %x\n",&(e->env_tf));
+     //step2
+     env_pop_tf(&(e->env_tf));
+     //panic("env_run not yet implemented");
  }
  
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
