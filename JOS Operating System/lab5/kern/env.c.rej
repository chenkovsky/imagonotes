***************
*** 13,21 ****
  #include <kern/monitor.h>
  #include <kern/sched.h>
  
- struct Env *envs = NULL;		// All environments
- struct Env *curenv = NULL;	        // The current env
- static struct Env_list env_free_list;	// Free list
  
  #define ENVGENSHIFT	12		// >= LOGNENV
  
--- 13,21 ----
  #include <kern/monitor.h>
  #include <kern/sched.h>
  
+ struct Env *envs = NULL;        // All environments
+ struct Env *curenv = NULL;          // The current env
+ static struct Env_list env_free_list;   // Free list
  
  #define ENVGENSHIFT	12		// >= LOGNENV
  
***************
*** 137,197 ****
  int
  env_alloc(struct Env **newenv_store, envid_t parent_id)
  {
- 	int32_t generation;
- 	int r;
- 	struct Env *e;
  
- 	if (!(e = LIST_FIRST(&env_free_list)))
- 		return -E_NO_FREE_ENV;
  
- 	// Allocate and set up the page directory for this environment.
- 	if ((r = env_setup_vm(e)) < 0)
- 		return r;
  
- 	// Generate an env_id for this environment.
- 	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
- 	if (generation <= 0)	// Don't create a negative env_id.
- 		generation = 1 << ENVGENSHIFT;
- 	e->env_id = generation | (e - envs);
- 	
- 	// Set the basic status variables.
- 	e->env_parent_id = parent_id;
- 	e->env_status = ENV_RUNNABLE;
- 	e->env_runs = 0;
  
- 	// Clear out all the saved register state,
- 	// to prevent the register values
- 	// of a prior environment inhabiting this Env structure
- 	// from "leaking" into our new environment.
- 	memset(&e->env_tf, 0, sizeof(e->env_tf));
  
- 	// Set up appropriate initial values for the segment registers.
- 	// GD_UD is the user data segment selector in the GDT, and 
- 	// GD_UT is the user text segment selector (see inc/memlayout.h).
- 	// The low 2 bits of each segment register contains the
- 	// Requestor Privilege Level (RPL); 3 means user mode.
- 	e->env_tf.tf_ds = GD_UD | 3;
- 	e->env_tf.tf_es = GD_UD | 3;
- 	e->env_tf.tf_ss = GD_UD | 3;
- 	e->env_tf.tf_esp = USTACKTOP;
- 	e->env_tf.tf_cs = GD_UT | 3;
- 	// You will set e->env_tf.tf_eip later.
  
- 	// Enable interrupts while in user mode.
- 	// LAB 4: Your code here.
  
- 	// Clear the page fault handler until user installs one.
- 	e->env_pgfault_upcall = 0;
  
- 	// Also clear the IPC receiving flag.
- 	e->env_ipc_recving = 0;
  
- 	// commit the allocation
- 	LIST_REMOVE(e, env_link);
- 	*newenv_store = e;
  
- 	cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
- 	return 0;
  }
  
  //
--- 154,217 ----
  int
  env_alloc(struct Env **newenv_store, envid_t parent_id)
  {
+     int32_t generation;
+     int r;
+     struct Env *e;
  
+     if (!(e = LIST_FIRST(&env_free_list)))
+         return -E_NO_FREE_ENV;
  
+     // Allocate and set up the page directory for this environment.
+     if ((r = env_setup_vm(e)) < 0)
+         return r;
  
+     // Generate an env_id for this environment.
+     generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
+     if (generation <= 0)    // Don't create a negative env_id.
+         generation = 1 << ENVGENSHIFT;
+     e->env_id = generation | (e - envs);
  
+     // Set the basic status variables.
+     e->env_parent_id = parent_id;
+     e->env_ipc_dstva = (void*)UTOP;
+     e->env_ipc_perm = 0;
+     e->env_ipc_from = 0;
+     e->env_status = ENV_RUNNABLE;
+     e->env_runs = 0;
  
+     // Clear out all the saved register state,
+     // to prevent the register values
+     // of a prior environment inhabiting this Env structure
+     // from "leaking" into our new environment.
+     memset(&e->env_tf, 0, sizeof(e->env_tf));
  
+     // Set up appropriate initial values for the segment registers.
+     // GD_UD is the user data segment selector in the GDT, and 
+     // GD_UT is the user text segment selector (see inc/memlayout.h).
+     // The low 2 bits of each segment register contains the
+     // Requestor Privilege Level (RPL); 3 means user mode.
+     e->env_tf.tf_ds = GD_UD | 3;
+     e->env_tf.tf_es = GD_UD | 3;
+     e->env_tf.tf_ss = GD_UD | 3;
+     e->env_tf.tf_esp = USTACKTOP;
+     e->env_tf.tf_cs = GD_UT | 3;
+     // You will set e->env_tf.tf_eip later.
  
+     // Enable interrupts while in user mode.
+     // LAB 4: Your code here.
+     e->env_tf.tf_eflags |= FL_IF;//!!!!!!!!!!!!!!!!!!!!!!!!!
+     // Clear the page fault handler until user installs one.
+     e->env_pgfault_upcall = 0;
  
+     // Also clear the IPC receiving flag.
+     e->env_ipc_recving = 0;
  
+     // commit the allocation
+     LIST_REMOVE(e, env_link);
+     *newenv_store = e;
  
+     cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
+     return 0;
  }
  
  //
***************
*** 293,343 ****
  void
  env_free(struct Env *e)
  {
- 	pte_t *pt;
- 	uint32_t pdeno, pteno;
- 	physaddr_t pa;
- 	
- 	// If freeing the current environment, switch to boot_pgdir
- 	// before freeing the page directory, just in case the page
- 	// gets reused.
- 	if (e == curenv)
- 		lcr3(boot_cr3);
  
- 	// Note the environment's demise.
- 	cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
  
- 	// Flush all mapped pages in the user portion of the address space
- 	static_assert(UTOP % PTSIZE == 0);
- 	for (pdeno = 0; pdeno < PDX(UTOP); pdeno++) {
  
- 		// only look at mapped page tables
- 		if (!(e->env_pgdir[pdeno] & PTE_P))
- 			continue;
  
- 		// find the pa and va of the page table
- 		pa = PTE_ADDR(e->env_pgdir[pdeno]);
- 		pt = (pte_t*) KADDR(pa);
  
- 		// unmap all PTEs in this page table
- 		for (pteno = 0; pteno <= PTX(~0); pteno++) {
- 			if (pt[pteno] & PTE_P)
- 				page_remove(e->env_pgdir, PGADDR(pdeno, pteno, 0));
- 		}
  
- 		// free the page table itself
- 		e->env_pgdir[pdeno] = 0;
- 		page_decref(pa2page(pa));
- 	}
  
- 	// free the page directory
- 	pa = e->env_cr3;
- 	e->env_pgdir = 0;
- 	e->env_cr3 = 0;
- 	page_decref(pa2page(pa));
  
- 	// return the environment to the free list
- 	e->env_status = ENV_FREE;
- 	LIST_INSERT_HEAD(&env_free_list, e, env_link);
  }
  
  //
--- 368,418 ----
  void
  env_free(struct Env *e)
  {
+     pte_t *pt;
+     uint32_t pdeno, pteno;
+     physaddr_t pa;
  
+     // If freeing the current environment, switch to boot_pgdir
+     // before freeing the page directory, just in case the page
+     // gets reused.
+     if (e == curenv)
+         lcr3(boot_cr3);
  
+     // Note the environment's demise.
+     cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
  
+     // Flush all mapped pages in the user portion of the address space
+     static_assert(UTOP % PTSIZE == 0);
+     for (pdeno = 0; pdeno < PDX(UTOP); pdeno++) {
  
+         // only look at mapped page tables
+         if (!(e->env_pgdir[pdeno] & PTE_P))
+             continue;
  
+         // find the pa and va of the page table
+         pa = PTE_ADDR(e->env_pgdir[pdeno]);
+         pt = (pte_t*) KADDR(pa);
  
+         // unmap all PTEs in this page table
+         for (pteno = 0; pteno <= PTX(~0); pteno++) {
+             if (pt[pteno] & PTE_P)
+                 page_remove(e->env_pgdir, PGADDR(pdeno, pteno, 0));
+         }
  
+         // free the page table itself
+         e->env_pgdir[pdeno] = 0;
+         page_decref(pa2page(pa));
+     }
  
+     // free the page directory
+     pa = e->env_cr3;
+     e->env_pgdir = 0;
+     e->env_cr3 = 0;
+     page_decref(pa2page(pa));
+ 
+     // return the environment to the free list
+     e->env_status = ENV_FREE;
+     LIST_INSERT_HEAD(&env_free_list, e, env_link);
  }
  
  //
***************
*** 383,410 ****
  void
  env_run(struct Env *e)
  {
- 	// Step 1: If this is a context switch (a new environment is running),
- 	//	   then set 'curenv' to the new environment,
- 	//	   update its 'env_runs' counter, and
- 	//	   and use lcr3() to switch to its address space.
- 	// Step 2: Use env_pop_tf() to restore the environment's
- 	//         registers and drop into user mode in the
- 	//         environment.
  
- 	// Hint: This function loads the new environment's state from
- 	//	e->env_tf.  Go back through the code you wrote above
- 	//	and make sure you have set the relevant parts of
- 	//	e->env_tf to sensible values.
- 	
- 	
- 	// LAB 3: Your code here.
  
      //LAB 4:  You may change this method for the process enter the kernel
      //  use the sysenter instruction.
      // Hint : you need to use the sysexit to exit to the kernel if it enter 
      //       the kernel use sysenter instruction.
- 	
- 
-         panic("env_run not yet implemented");
  }
  
--- 481,531 ----
  void
  env_run(struct Env *e)
  {
+     // Step 1: If this is a context switch (a new environment is running),
+     //	   then set 'curenv' to the new environment,
+     //	   update its 'env_runs' counter, and
+     //	   and use lcr3() to switch to its address space.
+     // Step 2: Use env_pop_tf() to restore the environment's
+     //         registers and drop into user mode in the
+     //         environment.
  
+     // Hint: This function loads the new environment's state from
+     //	e->env_tf.  Go back through the code you wrote above
+     //	and make sure you have set the relevant parts of
+     //	e->env_tf to sensible values.
  
+ 
+     // LAB 3: Your code here.
+ 
      //LAB 4:  You may change this method for the process enter the kernel
      //  use the sysenter instruction.
      // Hint : you need to use the sysexit to exit to the kernel if it enter 
      //       the kernel use sysenter instruction.
+     int is_sysexit = 0;
+     //cprintf("in the env_run function\n");
+     //cprintf("Env's id = %x\n",e->env_id);
+     if (curenv != NULL) {
+         //cprintf("How does the env go here,is sysenter?%d\n",curenv->env_tf.tf_padding1);
+         if (curenv->env_tf.tf_padding1 == 1) {
+             //cprintf("deal the condition that the env goes here by sysenter\n");
+             curenv->env_tf.tf_padding1 = 0;
+             //cprintf("the old env has set the padding1 as 0\n");
+             is_sysexit = 1;
+         }
+     }
+     //cprintf("the env arrive here\n");
+     if (curenv != e) {//if curenv = e, then the runs times won't be changed.    
+         curenv = e;
+         curenv->env_runs ++;
+     }
+     lcr3(curenv->env_cr3);
+     //cprintf("env_run has load the cr3. esp:%x\n",curenv->env_tf.tf_esp);
+     //step2
+     //cprintf("env_run envid:%d\n",curenv->env_id);
+     //if(is_sysexit) {
+         //env_pop_tf_sysexit(&(e->env_tf));
+     //}
+     env_pop_tf(&(e->env_tf));
+     //panic("env_run not yet implemented");
  }
  
